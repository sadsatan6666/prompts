— HYPER-MULTIMETHOD PROBLEM RESOLUTION MODE (FILTERED ≤4 STEPS, INCLUSIVE OF 3 OR 4)

DIRECTIVE:
Upon receiving {"this is where problem is given as input"}, execute the following protocol:

1. Enumerate and apply every possible, conceivable, and theoretical method, trick, or technique—existing, hybrid, or newly invented—by which the problem could be solved.
   - Methods may include, but are not limited to: standard textbook approaches, alternative algorithms, conceptual reformulations, visual/graphical tools, analogies, reverse engineering, brute force, logical deduction, mathematical induction, symmetry, dimensional analysis, probabilistic reasoning, computational simulation, heuristic shortcuts, AI/ML-assisted analysis, cross-domain analogies, and any speculative or unconventional techniques.
   - For each method, include distinct variations, parameterizations, and stepwise sub-techniques to maximize breadth and depth of combinatorial coverage.

2. For every applied method:
   - Document the precise execution steps, including all intermediate logic and transformations.
   - Note the underlying principles, assumptions, and domains invoked.
   - **Tally the exact number of execution steps or logical operations required.**

3. After exhaustive application and documentation:
   - **Filter and output only those methods which require exactly 3 or 4 steps.**
   - Any method that requires fewer than 3 steps or more than 4 steps is to be collected in a secondary "Garbage Bin" (Filtered Out Methods) section, not as part of the main output.
— AIM-FUSION PROBLEM SOLVING FRAMEWORK (REVERSE ENGINEERING + HYPER-MULTIMETHOD ≤4 STEPS)

DIRECTIVE:  
Upon receiving {"problem input"}, execute:

1. **Reverse engineer the problem:**  
   - Identify underlying steps, concepts, techniques, patterns, rhythms, and algorithms used or implied in rational, philosophical, or verbal/math problems.  
   - Apply "pattern paradigm" and "pattern pyramid" analysis, leveraging temporal and spatial pattern recognition.

2. **Enumerate every possible solution method:**  
   - Include standard, alternative, hybrid, invented, and cross-domain approaches (e.g., visual, analogical, algorithmic, logical, AI-assisted, speculative).  
   - For each, specify variations, parameterizations, and sub-techniques for maximal combinatorial coverage.

3. **For each method:**  
   - Document steps, logic, and transformation sequence.  
   - Note principles, assumptions, domains, and pattern utilization.  
   - **Count steps required.**

4. **Filter and output only methods with ≤4 steps (i.e., 1, 2, 3, or 4).**  
   - Bin methods >4 steps in a "Filtered Out Methods" section.

5. **Rank, summarize, and visualize:**  
   - Order by efficiency (fewest steps first).  
   - Provide summary table and insights on optimal and creative ≤4-step solutions.  
   - Optionally, propose meta-methods for pattern or algorithm invention.

STATE: Pattern-centric reasoning, maximal combinatorial logic, creative enumeration ENABLED.  
STRICT FILTER: Only ≤4-step methods in main output; all others binned.
4. Rank and sort the 3- or 4-step methods:
   - From the most efficient (least steps/operations) to the least efficient (most steps/operations).
   - Provide a summary table or visualization of the step counts and method types.

5. Output:
   - **Main Output:** Full enumerated list of all methods (with scenarios and step counts) that require exactly 3 or exactly 4 steps.
   - **Garbage Bin:** List of all methods/scenarios which require fewer than 3 or more than 4 steps.
   - Summary and insights regarding optimal, suboptimal, and most creative approaches among the 3- and 4-step set.
   - Optionally, propose meta-methods for inventing new techniques or automating the discovery of additional solution paths.

state: Maximal combinatorial reasoning, logical creativity, and metacognitive enumeration ENABLED.  
STRICT FILTER: Only methods with exactly 3 or 4 steps in main output. All others are filtered and binned.
